{"version":3,"sources":["components/SearchBar/SearchBar.tsx","components/TableHeader/TableHeader.tsx","components/SearchResults/SearchResults.tsx","components/Details/Details.tsx","components/ResultsTable/ResultsTable.tsx","hooks/useSearchUpdate.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchBar","searchWord","setSearchWord","setSearchResult","setSelected","className","method","type","name","autoComplete","placeholder","value","String","onChange","e","target","TableHeader","selected","colSpan","style","textAlign","SearchResults","searchResult","handleClick","map","item","index","pattern","toLowerCase","position","indexOf","begin","substring","highlighted","length","end","onClick","id","Details","Object","entries","key","Number","selectedResultsEntry","replace","ResultsTable","currentTarget","getAttribute","isSearchResultNotZero","useSearchUpdate","useEffect","getData","resource","a","searchURL","axios","get","response","results","data","result","console","log","Promise","all","then","flat","App","useState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33d3a31e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { searchResult } from \"../../hooks/useSearchUpdate\";\r\n\r\nimport \"./SearchBar.css\";\r\n\r\ntype SearchBarProps = {\r\n  searchWord: string;\r\n  setSearchWord: React.Dispatch<React.SetStateAction<string>>;\r\n  setSearchResult: React.Dispatch<React.SetStateAction<searchResult[]>>;\r\n  setSelected: React.Dispatch<React.SetStateAction<string | null>>;\r\n};\r\n\r\nconst SearchBar = ({\r\n  searchWord,\r\n  setSearchWord,\r\n  setSearchResult,\r\n  setSelected,\r\n}: SearchBarProps): JSX.Element => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchWord(e.target.value);\r\n    setSearchResult([]);\r\n    setSelected(null);\r\n  };\r\n  return (\r\n    <form className=\"searchBar\" method=\"get\">\r\n      <input\r\n        type=\"search\"\r\n        name=\"search\"\r\n        className=\"search\"\r\n        autoComplete=\"off\"\r\n        placeholder=\"Enter your query\"\r\n        value={String(searchWord)}\r\n        onChange={handleChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\ntype TableProps = {\r\n  selected: string | null;\r\n};\r\n\r\nconst TableHeader = ({ selected }: TableProps) => {\r\n  return (\r\n    <thead>\r\n      {selected ? (\r\n        <tr>\r\n          <th colSpan={2} style={{ textAlign: \"center\" }}>\r\n            Details\r\n          </th>\r\n        </tr>\r\n      ) : (\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Type</th>\r\n        </tr>\r\n      )}\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHeader;\r\n","import React from \"react\";\r\n\r\nimport \"./searchResults.css\";\r\n\r\ntype SearchResultsProps = {\r\n  searchResult: object[];\r\n  searchWord: string;\r\n  handleClick: (\r\n    e: React.MouseEvent<HTMLTableRowElement | HTMLButtonElement, MouseEvent>\r\n  ) => void;\r\n};\r\n\r\nconst SearchResults = ({\r\n  searchResult,\r\n  searchWord,\r\n  handleClick,\r\n}: SearchResultsProps): JSX.Element => {\r\n  return (\r\n    <>\r\n      {searchResult.map((item: any, index: number) => {\r\n        const name: string = item.name;\r\n        const pattern: string = searchWord.toLowerCase();\r\n        const string: string = name.toLowerCase();\r\n        const position: number = string.indexOf(pattern);\r\n        const begin: string = name.substring(0, position);\r\n        const highlighted: string = name.substring(\r\n          position,\r\n          position + pattern.length\r\n        );\r\n        const end: string = name.substring(\r\n          position + pattern.length,\r\n          name.length\r\n        );\r\n        return (\r\n          <tr\r\n            className=\"result-row\"\r\n            key={item.name}\r\n            onClick={handleClick}\r\n            id={String(index)}\r\n          >\r\n            <td>\r\n              {begin}\r\n              <b>{highlighted}</b>\r\n              {end}\r\n            </td>\r\n            <td>{item.type}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\n\r\nimport \"./Details.css\";\r\n\r\ntype DetailsProps = {\r\n  selected: string | null;\r\n  searchResult: object[];\r\n  handleClick: (\r\n    e: React.MouseEvent<HTMLTableRowElement | HTMLButtonElement, MouseEvent>\r\n  ) => void;\r\n};\r\n\r\nconst Details = ({\r\n  selected,\r\n  searchResult,\r\n  handleClick,\r\n}: DetailsProps): JSX.Element => {\r\n  const selectedResultsEntry = (searchResult: object[], key: string | null) => {\r\n    return searchResult[Number(key)];\r\n  };\r\n  return (\r\n    <div className=\"details-list\">\r\n      <button className=\"return-button\" onClick={handleClick}>\r\n        Back\r\n      </button>\r\n      {Object.entries(selectedResultsEntry(searchResult, selected)).map(\r\n        (item) => {\r\n          return typeof item[1] !== \"object\" ? (\r\n            <tr key={item[0]}>\r\n              <td className=\"details-list__name\">\r\n                {item[0].replace(\"_\", \" \")}\r\n              </td>\r\n              <td className=\"details-list__value\">{item[1]}</td>\r\n            </tr>\r\n          ) : null;\r\n        }\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","import React from \"react\";\r\nimport TableHeader from \"../TableHeader/\";\r\nimport SearchResults from \"../SearchResults/\";\r\nimport Details from \"../Details/\";\r\n\r\nimport \"./ResultsTable.css\";\r\n\r\ntype ResultsTableProps = {\r\n  selected: string | null;\r\n  setSelected: React.Dispatch<React.SetStateAction<string | null>>;\r\n  searchResult: object[];\r\n  searchWord: string;\r\n};\r\n\r\nconst ResultsTable = ({\r\n  selected,\r\n  setSelected,\r\n  searchResult,\r\n  searchWord,\r\n}: ResultsTableProps) => {\r\n  const isKeyNull = (key: string | null) => key === null;\r\n  const isSearchResultNotZero = (searchResult: object[]) => {\r\n    return searchResult.length > 0;\r\n  };\r\n  const selectedResultsEntry = (searchResult: object[], key: string | null) => {\r\n    return searchResult[Number(key)];\r\n  };\r\n\r\n  const handleClick = (\r\n    e: React.MouseEvent<HTMLTableRowElement | HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    selected\r\n      ? setSelected(null)\r\n      : setSelected(e.currentTarget.getAttribute(\"id\"));\r\n  };\r\n\r\n  return (\r\n    <table className=\"result\">\r\n      {isSearchResultNotZero(searchResult) ? (\r\n        <TableHeader selected={selected} />\r\n      ) : null}\r\n\r\n      <tbody>\r\n        {isKeyNull(selected) ? (\r\n          <SearchResults\r\n            searchResult={searchResult}\r\n            searchWord={searchWord}\r\n            handleClick={handleClick}\r\n          />\r\n        ) : selectedResultsEntry(searchResult, selected) ? (\r\n          <Details\r\n            selected={selected}\r\n            searchResult={searchResult}\r\n            handleClick={handleClick}\r\n          />\r\n        ) : null}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\nexport default ResultsTable;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://swapi.dev/api/\";\r\n\r\ntype props = {\r\n  setSearchResult: React.Dispatch<React.SetStateAction<searchResult[]>>;\r\n  searchWord: string;\r\n};\r\n\r\nexport type searchResult = {\r\n  name: string;\r\n  [propName: string]: string | string[];\r\n};\r\n\r\nconst useSearchUpdate = ({ setSearchResult, searchWord }: props) => {\r\n  useEffect(() => {\r\n    const resources = [\r\n      \"people\",\r\n      \"planets\",\r\n      \"films\",\r\n      \"species\",\r\n      \"vehicles\",\r\n      \"starships\",\r\n    ];\r\n\r\n    const getData = async (\r\n      resource: string,\r\n      searchWord: string\r\n    ): Promise<searchResult[] | []> => {\r\n      try {\r\n        const searchURL = BASE_URL + `${resource}/?search=${searchWord}`;\r\n        const response = await axios.get(searchURL);\r\n        const results = response.data.results;\r\n        return results.map((result: searchResult) => {\r\n          return {\r\n            name: result.name,\r\n            type: resource,\r\n          };\r\n        });\r\n      } catch (err) {\r\n        console.log(err);\r\n        return [];\r\n      }\r\n    };\r\n\r\n    if (searchWord.length >= 3) {\r\n      Promise.all(\r\n        resources.map((resource) => getData(resource, searchWord))\r\n      ).then((results) => {\r\n        setSearchResult(results.flat());\r\n      });\r\n    }\r\n  }, [searchWord, setSearchResult]);\r\n};\r\n\r\nexport default useSearchUpdate;\r\n","import { useState } from \"react\";\r\n\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport ResultsTable from \"./components/ResultsTable/\";\r\n\r\nimport useSearchUpdate, { searchResult } from \"./hooks/useSearchUpdate\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [searchWord, setSearchWord] = useState<string>(\"\");\r\n  const [searchResult, setSearchResult] = useState<searchResult[]>([]);\r\n  const [selected, setSelected] = useState<string | null>(null);\r\n\r\n  useSearchUpdate({ setSearchResult, searchWord });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SearchBar\r\n        searchWord={searchWord}\r\n        setSearchWord={setSearchWord}\r\n        setSearchResult={setSearchResult}\r\n        setSelected={setSelected}\r\n      />\r\n      <ResultsTable\r\n        selected={selected}\r\n        setSelected={setSelected}\r\n        searchResult={searchResult}\r\n        searchWord={searchWord}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}